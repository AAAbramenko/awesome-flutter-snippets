{
    "Stateless Widget ": {
        "prefix": "stlss",
        "body": [
            "class ${0:name} extends StatelessWidget {",
            "\t@override",
            "\tWidget build(BuildContext context) {",
            "\t\treturn Container();",
            "\t}",
            "}"
        ],
        "description": "Creats a Stateless widget"
    },
    "Stateful Widget ": {
        "prefix": "stful",
        "body": [
            "class ${1:name} extends StatefulWidget{",
            "\t${1:name}State createState()=>  ${1:name}State();",
            "}",
            "\n",
            "class ${1:index}State extends State<${1:index}> {",
            "\t@override",
            "\tWidget build(BuildContext context){",
            "\t\treturn Container();",
            "\t}",
            "}"
        ],
        "description": "Creats a Stateful widget"
    },
    "Build Method": {
        "prefix": "bld",
        "body": [
            "@override",
            "Widget build(BuildContext context) {",
            "\treturn ",
            "}"
        ],
        "description": "Describes the part of the user interface represented by this widget."
    },
    "Custom Painter ": {
        "prefix": "cp",
        "body": [
            "class ${0:name}Painter extends CustomPainter {",
            "\n",
            "\t@override",
            "\tvoid paint(Canvas canvas, Size size) {",
            "\t}",
            "\n",
            "\t@override",
            "\tbool shouldRepaint(${0:name}Painter oldDelegate) => false;",
            "\n",
            "\t@override",
            "\tbool shouldRebuildSemantics(${0:name}Painter oldDelegate) => false;",
            "}"
        ],
        "description": "Used for creating custom paint"
    },
    "Custom Clipper ": {
        "prefix": "cc",
        "body": [
            "class ${0:name}Clipper extends CustomClipper<Path> {",
            "\n",
            "\t@override",
            "\tPath getClip(Size size) {",
            "\t}",
            "\n",
            "\t@override",
            "\tbool shouldReclip(CustomClipper<Path> oldClipper) => false;",
            "}"
        ],
        "description": "Used for creating custom shapes"
    },
    "InitState ": {
        "prefix": "init",
        "body": [
            "void initState() { ",
            "\n",
            "\tsuper.initState();",
            "}"
        ],
        "description": "Called when this object is inserted into the tree. The framework will call this method exactly once for each State object it creates."
    },
    "Dispose": {
        "prefix": "dis",
        "body": [
            "@override",
            "void dispose() { ",
            "\tsuper.dispose();",
            "}"
        ],
        "description": "Called when this object is removed from the tree permanently. The framework calls this method when this State object will never build again."
    },
    "Reassemble": {
        "prefix": "rasm",
        "body": [
            "@override",
            "void reassemble(){",
            "\tsuper.reassemble();",
            "}"
        ],
        "description": "Called whenever the application is reassembled during debugging, for example during hot reload."
    },
    "didChangeDependencies": {
        "prefix": "dcd",
        "body": [
            "@override",
            "void didChangeDependencies() {",
            "\tsuper.didChangeDependencies();",
            "}"
        ],
        "description": "Called when a dependency of this State object changes"
    },
    "didUpdateWidget": {
        "prefix": "duw",
        "body": [
            "@override",
            "void didUpdateWidget (${1:Type} ${2:oldWidget}) {",
            "\tsuper.didUpdateWidget(${2:oldWidget});",
            "}"
        ],
        "description": "Called whenever the widget configuration changes."
    },
    "ListView.Builder": {
        "prefix": "lsb",
        "body": [
            "ListView.builder(",
            "\t\titemCount: 1,",
            "\t\titemBuilder: (BuildContext context, int index) {",
            "\t\treturn Container();",
            "\t},",
            "),"
        ],
        "description": "Creates a scrollable, linear array of widgets that are created on demand.Providing a non-null `itemCount` improves the ability of the [ListView] to estimate the maximum scroll extent."
    },
    "Custom Scroll View": {
        "prefix": "csv",
        "body": [
            "CustomScrollView(",
            "\tslivers: <Widget>[",
            " \t],",
            "),"
        ],
        "description": "Creates a `ScrollView` that creates custom scroll effects using slivers. If the `primary` argument is true, the `controller` must be null."
    },
    "Stream Builder": {
        "prefix": "stb",
        "body": [
            "StreamBuilder(",
            "\tstream: ${1:stream} ,",
            "\tinitialData: ${2:initialData} ,",
            "\tbuilder: (BuildContext context, AsyncSnapshot snapshot){",
            "\t\treturn ${3:Container();}",
            "\t},",
            "),"
        ],
        "description": "Creates a new `StreamBuilder` that builds itself based on the latest snapshot of interaction with the specified `stream`"
    },
    "Animated Builder": {
        "prefix": "abldr",
        "body": [
            "AnimatedBuilder(",
            "\tanimation: ${1:animation},",
            "\tchild: ${2:child},",
            "\tbuilder: (BuildContext context, Widget child) {",
            "\t\treturn ${3:Container();}",
            "\t},",
            "),"
        ],
        "description": "Creates an Animated Builder. The widget specified to `child` is passed to the `builder` "
    },
    "Stateful Builder": {
        "prefix": "stflbldr",
        "body": [
            "StatefulBuilder(",
            "\tbuilder: (BuildContext context, setState) {",
            "\t\treturn {1:Container();}",
            "\t},",
            "),"
        ],
        "description": "Creates a widget that both has state and delegates its build to a callback. Useful for rebuilding specific sections of the widget tree."
    }
}